diff --git a/tutorial/lesson1.test.ts b/tutorial/lesson1.test.ts
index a2693c2..9d51731 100644
--- a/tutorial/lesson1.test.ts
+++ b/tutorial/lesson1.test.ts
@@ -52,7 +52,7 @@ it("Lesson 1: Form a State with the correct format", async () => {
   /* Putting it all together */
   const state: State = {
     turnNum: 0,
-    isFinal: true, // FIXME
+    isFinal: false,
     channel,
     challengeDuration,
     outcome,
diff --git a/tutorial/lesson10.test.ts b/tutorial/lesson10.test.ts
index 7b722e5..da5c97e 100644
--- a/tutorial/lesson10.test.ts
+++ b/tutorial/lesson10.test.ts
@@ -117,6 +117,5 @@ it("Lesson 10: Extract information from a ChallengeRegistered event", async () =
   expect(eventVariableParts[eventVariableParts.length - 1][1]).toEqual(
     variableParts[variableParts.length - 1].appData
   );
-  expect(bigNumberify(eventFinalizesAt._hex).isZero()).toBe(true); // FIXME
-  // expect(bigNumberify(eventFinalizesAt._hex).gt(0)).toBe(true);
+  expect(bigNumberify(eventFinalizesAt._hex).gt(0)).toBe(true);
 });
diff --git a/tutorial/lesson11.test.ts b/tutorial/lesson11.test.ts
index f4a9916..3eedd6f 100644
--- a/tutorial/lesson11.test.ts
+++ b/tutorial/lesson11.test.ts
@@ -14,11 +14,9 @@ import {
 it("Lesson 11: Construct an allocation Outcome", async () => {
   /*
     Construct an outcome allocating 3 wei to the zero address
-    Recall that earlier in the tutorial we depositied into the ETH_ASSET_HOLDER
-    whose address is stored in process.env
   */
   const assetOutcome: AllocationAssetOutcome = {
-    assetHolderAddress: AddressZero, // FIXME
+    assetHolderAddress: AddressZero, // Use a dummy value here
     allocationItems: [
       { destination: convertAddressToBytes32(AddressZero), amount: "0x03" },
       // other payouts go here
@@ -28,7 +26,7 @@ it("Lesson 11: Construct an allocation Outcome", async () => {
   const outcome: Outcome = [assetOutcome]; // Additional assetOutcomes could be pushed into this array
 
   expect(encodeOutcome(outcome)).toEqual(
-    "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000009ed274314f0fb37837346c425d3cf28d89ca
+    "0x
   );
   expect(decodeOutcome(encodeOutcome(outcome))).toEqual(outcome);
 });
diff --git a/tutorial/lesson12.test.ts b/tutorial/lesson12.test.ts
index 606d06a..91e049b 100644
--- a/tutorial/lesson12.test.ts
+++ b/tutorial/lesson12.test.ts
@@ -1,6 +1,6 @@
 /* Import ethereum wallet utilities  */
 import { ethers } from "ethers";
-const { HashZero } = ethers.constants;
+const { HashZero, AddressZero } = ethers.constants;
 
 /* Import statechannels wallet utilities  */
 import {
@@ -15,12 +15,12 @@ it("Lesson 12: Construct a guarantee Outcome", async () => {
     Construct a guarantee outcome that gives preference to player b over player a
   */
   const assetOutcome: GuaranteeAssetOutcome = {
-    assetHolderAddress: process.env.ETH_ASSET_HOLDER_ADDRESS,
+    assetHolderAddress: AddressZero,
     guarantee: {
       targetChannelId: HashZero,
       destinations: [
-        "0x000000000000000000000000000000000000000000000000000000000000000a", // FIXME
-        "0x000000000000000000000000000000000000000000000000000000000000000b", // FIXME
+        "0x000000000000000000000000000000000000000000000000000000000000000b",
+        "0x000000000000000000000000000000000000000000000000000000000000000a",
       ],
     },
   };
@@ -28,7 +28,7 @@ it("Lesson 12: Construct a guarantee Outcome", async () => {
   const outcome: Outcome = [assetOutcome]; // Additional assetOutcomes could be pushed into this array
 
   expect(encodeOutcome(outcome)).toEqual(
-    "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000009ed274314f0fb37837346c425d3cf28d89ca95990000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000b000000000000000000000000000000000000000000000000000000000000000a"
+    "0xc00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000b000000000000000000000000000000000000000000000000000000000000000a"
   );
   expect(decodeOutcome(encodeOutcome(outcome))).toEqual(outcome);
 });
diff --git a/tutorial/lesson13.test.ts b/tutorial/lesson13.test.ts
index e338a06..c60a062 100644
--- a/tutorial/lesson13.test.ts
+++ b/tutorial/lesson13.test.ts
@@ -91,8 +91,7 @@ it("Lesson 13: Call pushOutcome", async () => {
   const challengerAddress = AddressZero; // Reset in a happy conclude
   const outcomeBytes = encodeOutcome(state.outcome);
 
-  const turnNumRecord = largestTurnNum; // FIXME
-  // const turnNumRecord = 0; // Always 0 for a happy conclude
+  const turnNumRecord = 0; // Always 0 for a happy conclude
 
   const tx1 = NitroAdjudicator.pushOutcome(
     channelId,
diff --git a/tutorial/lesson14.test.ts b/tutorial/lesson14.test.ts
index 7467000..a0f5e21 100644
--- a/tutorial/lesson14.test.ts
+++ b/tutorial/lesson14.test.ts
@@ -14,6 +14,7 @@ import {
   encodeOutcome,
   AllocationAssetOutcome,
   hashAppPart,
+  encodeAllocation,
 } from "@statechannels/nitro-protocol";
 
 /* Set up an ethereum provider connected to our local blockchain */
@@ -117,8 +118,7 @@ it("Lesson 14: Call transferAll", async () => {
   /* Submit a transferAll transaction */
   const tx3 = ETHAssetHolder.transferAll(
     channelId,
-    HashZero // FIXME
-    // encodeAllocation(assetOutcome.allocationItems)
+    encodeAllocation(assetOutcome.allocationItems)
   );
 
   /* 
diff --git a/tutorial/lesson15.test.ts b/tutorial/lesson15.test.ts
index e599bdd..60ffa7c 100644
--- a/tutorial/lesson15.test.ts
+++ b/tutorial/lesson15.test.ts
@@ -182,17 +182,11 @@ it("Lesson 15: Call claimAll", async () => {
     Submit claimAll transaction
   */
 
-  // FIXME
   const tx5 = ETHAssetHolder.claimAll(
     guarantorChannelId,
-    encodeAllocation(assetOutcomeForTheTargetChannel.allocationItems),
-    encodeGuarantee(assetOutcomeForTheGuarantorChannel.guarantee)
+    encodeGuarantee(assetOutcomeForTheGuarantorChannel.guarantee),
+    encodeAllocation(assetOutcomeForTheTargetChannel.allocationItems)
   );
-  // const tx5 = ETHAssetHolder.claimAll(
-  //   guarantorChannelId,
-  //   encodeGuarantee(assetOutcomeForTheGuarantorChannel.guarantee),
-  //   encodeAllocation(assetOutcomeForTheTargetChannel.allocationItems)
-  // );
 
   /* 
     Check that an AssetTransferred event was emitted.
diff --git a/tutorial/lesson16.test.ts b/tutorial/lesson16.test.ts
index 31fc4e9..e636a40 100644
--- a/tutorial/lesson16.test.ts
+++ b/tutorial/lesson16.test.ts
@@ -84,12 +84,12 @@ it("Lesson 16: Ledger funding", async () => {
   */
   let signatures;
   signatures = [
-    signState(sixEachStatePreFS, hubSigningKey).signature, // FIXME
+    signState(sixEachStatePreFS, mySigningKey).signature,
     signState(sixEachStatePreFS, hubSigningKey).signature,
   ];
   expect(JSON.stringify(signatures)).toEqual(
     // LOOK FOR FIXME ABOVE
-    '[{"r":"0xd8ba8e03963a408bf00ea1f44b9f12604762fe3b3075e96d060b4282a355bf17","s":"0x7c53e0ae7241b676132f975a51d5fefdcbfb94c1a62b627cda3fce56b5a6310e","recoveryParam":0,"v":27},{"r":"0x316c53596fed74cc6ececb77fd164832517e2ab6591ba8f850d6bcc008041bbf","s":"0x22d6307912fa14a073fdab7ba38b52e199d3c2880d3699e4282c301dd0868821","recoveryParam":1,"v":28}]'
+    '[{"r":"0x09525fa7f35bf9e1f49d3bf9ca8439681efb35c4e5defad06b4e8e78e55fcd12","s":"0x2ed6d8f0ddb7f7393a72212273e0f256ae8b1031e0e004aed2fb01338ae2588a","recoveryParam":1,"v":28},{"r":"0x1a9c575e7a8220cb82bb8d96c976c94d847c16c24e631c94a6f83eb8a468459d","s":"0x6c0853ed2f8fa2a64d8d484fbe5fad1ce6dd8bce89ceef298492a013faa29f5f","recoveryParam":1,"v":28}]'
   );
 
   /*
diff --git a/tutorial/lesson2.test.ts b/tutorial/lesson2.test.ts
index be6aa2e..a10a171 100644
--- a/tutorial/lesson2.test.ts
+++ b/tutorial/lesson2.test.ts
@@ -44,7 +44,7 @@ it("Lesson 2: Conform to an on chain validTransition function", async () => {
   };
 
   /* Construct another state */
-  const toState: State = { ...fromState, turnNum: 1, appData: "0x1" }; // FIXME
+  const toState: State = { ...fromState, turnNum: 1, appData: "0x0" };
 
   /* 
     Check validity of transition from one state to the other
diff --git a/tutorial/lesson3.test.ts b/tutorial/lesson3.test.ts
index 5ebc528..1249b24 100644
--- a/tutorial/lesson3.test.ts
+++ b/tutorial/lesson3.test.ts
@@ -61,7 +61,6 @@ it("Lesson 3: Support a state with signatures", async () => {
   /* Sign the states */
   const whoSignedWhat = [0, 1, 2];
   const sigs = await signStates(states, wallets, whoSignedWhat);
-  sigs.reverse(); // FIXME
 
   /*
    * Use the checkpoint method to test our signatures
diff --git a/tutorial/lesson4.test.ts b/tutorial/lesson4.test.ts
index c20c7ea..3bb83d8 100644
--- a/tutorial/lesson4.test.ts
+++ b/tutorial/lesson4.test.ts
@@ -1,6 +1,6 @@
 import { ethers } from "ethers";
 const { bigNumberify } = ethers.utils;
-import { Channel } from "@statechannels/nitro-protocol";
+import { Channel, getChannelId } from "@statechannels/nitro-protocol";
 
 it("Lesson 4: construct a Channel and compute its id", async () => {
   /*
@@ -23,15 +23,13 @@ it("Lesson 4: construct a Channel and compute its id", async () => {
     */
   const channelNonce = bigNumberify(0).toHexString();
 
-  const channelId = "fixme"; // FIX ME
-
   /* 
       Uncomment the lines below to use the imported helper function to compute the channel id.
       Feel free to take a look at the implementation of that helper 
     */
 
   const channel: Channel = { chainId, channelNonce, participants };
-  // const channelId = getChannelId(channel);
+  const channelId = getChannelId(channel);
 
   /* 
       Expectations around the format of the channel Id:
diff --git a/tutorial/lesson5.test.ts b/tutorial/lesson5.test.ts
index fafc201..5fe8f86 100644
--- a/tutorial/lesson5.test.ts
+++ b/tutorial/lesson5.test.ts
@@ -4,7 +4,10 @@ const { parseUnits } = ethers.utils;
 const { HashZero } = ethers.constants;
 
 /* Import statechannels wallet utilities  */
-import { getDepositedEvent } from "@statechannels/nitro-protocol";
+import {
+  getDepositedEvent,
+  randomChannelId,
+} from "@statechannels/nitro-protocol";
 
 /* Set up an ethereum provider connected to our local blockchain */
 const provider = new ethers.providers.JsonRpcProvider(
@@ -27,17 +30,17 @@ const ETHAssetHolder = new ethers.Contract(
 it("Lesson 5: depositing into the ETH asset holder", async () => {
   /*
       Get an appropriate representation of 1 wei, and
-      use ethers.HashZero = 0x000...0 as a dummy channelId.
+      use a random channelId.
       WARNING: don't do this in the wild: you won't be able to recover these funds.
   */
   const amount = parseUnits("1", "wei");
-  const destination = HashZero;
+  const destination = randomChannelId();
 
   /*
       Attempt to deposit 1 wei against the channel id we created.
       Inspect the error message in the console for a hint about the bug on the next line 
   */
-  const expectedHeld = 1; // FIXME
+  const expectedHeld = 0;
   const tx0 = ETHAssetHolder.deposit(destination, expectedHeld, amount, {
     value: amount,
   });
diff --git a/tutorial/lesson6.test.ts b/tutorial/lesson6.test.ts
index b7c9fcf..d235d22 100644
--- a/tutorial/lesson6.test.ts
+++ b/tutorial/lesson6.test.ts
@@ -44,7 +44,7 @@ it("Lesson 6: Conclude a channel (happy)", async () => {
   const channel: Channel = { chainId, channelNonce, participants };
   const largestTurnNum = 4;
   const state: State = {
-    isFinal: false, // FIXME
+    isFinal: true,
     channel,
     outcome: [],
     appDefinition: AddressZero,
diff --git a/tutorial/lesson7.test.ts b/tutorial/lesson7.test.ts
index 9206fff..7906917 100644
--- a/tutorial/lesson7.test.ts
+++ b/tutorial/lesson7.test.ts
@@ -44,8 +44,7 @@ it("Lesson 7: Register a challenge using forceMove", async () => {
   const channel: Channel = { chainId, channelNonce, participants };
 
   /* Choose a challenger */
-  const challenger = ethers.Wallet.createRandom(); // FIXME
-  // const challenger = wallets[0];
+  const challenger = wallets[0];
 
   /* Construct a progression of states */
   const largestTurnNum = 8;
diff --git a/tutorial/lesson9.test.ts b/tutorial/lesson9.test.ts
index a13bd39..c3a096b 100644
--- a/tutorial/lesson9.test.ts
+++ b/tutorial/lesson9.test.ts
@@ -124,7 +124,7 @@ it("Lesson 9: Clear a challenge using respond", async () => {
   */
   const expectedChannelStorageHash = channelDataToChannelStorageHash({
     turnNumRecord: largestTurnNum,
-    finalizesAt: 0x1, // FIXME
+    finalizesAt: 0,
   });
 
   /* 
